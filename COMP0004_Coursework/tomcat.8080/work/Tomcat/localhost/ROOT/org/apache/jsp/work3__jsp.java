/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2023-03-25 11:44:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.HashMap;
import java.util.ArrayList;
import ucl.ac.uk.model.Item;

public final class work3__jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("ucl.ac.uk.model.Item");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>List Example 3</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <h1>List Example</h1>\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        ArrayList<ListItem> lists = (ArrayList<ListItem>) session.getAttribute("lists");
        if (lists == null) {
            lists = new ArrayList<ListItem>();
            session.setAttribute("lists", lists);
        }
    
      out.write("\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        String listName = request.getParameter("listName");
        if (listName == null || listName.trim().isEmpty()) {
            listName = "My List";
        }
    
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        String action = request.getParameter("action");
        if (action == null) {
            action = "view";
        }
    
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        HashMap<String, ArrayList<Item>> lists = (HashMap<String, ArrayList<Item>>) application.getAttribute("lists");
        if (lists == null) {
            lists = new HashMap<String, ArrayList<Item>>();
            application.setAttribute("lists", lists);
        }
    
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");
 switch (action) {
        case "create":
            lists.put(listName, new ArrayList<Item>());
            break;
        case "delete":
            lists.remove(listName);
            break;
        case "rename":
            String newName = request.getParameter("newName");
            if (newName != null && !newName.trim().isEmpty()) {
                ArrayList<Item> list = lists.remove(listName);
                lists.put(newName, list);
                listName = newName;
            }
            break;
    } 
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");
 if (action.equals("add")) {
        ArrayList<Item> list = lists.get(listName);
        if (list == null) {
            list = new ArrayList<Item>();
            lists.put(listName, list);
        }
        String itemText = request.getParameter("itemText");
        String itemUrl = request.getParameter("itemUrl");
        String itemImage = request.getParameter("itemImage");
        if (itemText != null && !itemText.trim().isEmpty()) {
            Item item = new Item(itemText, itemUrl, itemImage);
            list.add(item);
        }
    } 
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    <form method=\"get\">\n");
      out.write("        <label>Select a List:</label>\n");
      out.write("        <select name=\"listName\">\n");
      out.write("            ");
 for (String name : lists.keySet()) { 
      out.write("\n");
      out.write("            <option value=\"");
      out.print( name );
      out.write('"');
 if (name.equals(listName)) { 
      out.write(" selected");
 } 
      out.write('>');
      out.print( name );
      out.write("</option>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        </select>\n");
      out.write("        <input type=\"submit\" value=\"View\">\n");
      out.write("        <input type=\"submit\" name=\"action\" value=\"Create\">\n");
      out.write("        <input type=\"submit\" name=\"action\" value=\"Delete\">\n");
      out.write("        <label>Rename to:</label>\n");
      out.write("        <input type=\"text\" name=\"newName\">\n");
      out.write("        <input type=\"submit\" name=\"action\" value=\"Rename\">\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
