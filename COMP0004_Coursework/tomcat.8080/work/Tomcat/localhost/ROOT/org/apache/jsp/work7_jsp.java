/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2023-03-25 22:12:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import ucl.ac.uk.model.Item;
import java.util.*;

public final class work7_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("ucl.ac.uk.model.Item");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>List Example</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("    ");

        // Create a list to store all the lists
        ArrayList<ArrayList<Item>> allLists = new ArrayList<ArrayList<Item>>();
        ArrayList<String> listNames = new ArrayList<String>();

        // Check if the user has submitted the form to create a new list
        String newListName = request.getParameter("newListName");
        if (newListName != null && !newListName.isEmpty()) {
            // Create a new list with the given name
            ArrayList<Item> newList = new ArrayList<Item>();
            allLists.add(newList);
            listNames.add(newListName);
        }

        // Check if the user has selected a list
        String listName = request.getParameter("listName");
        if (listName != null) {
            int index = listNames.indexOf(listName);
            if (index != -1) {
                list = allLists.get(index);
            }
        }

        // If no list has been selected, default to the first list
        if (list == null) {
            list = allLists.get(0);
            listName = listNames.get(0);
        }


        // Get the index of the selected list
        int listIndex = listNames.indexOf(listName);

        // Check if the user has submitted the form to add an item to the selected list
        String newItemName = request.getParameter("newItemName");
        String newItemUrl = request.getParameter("newItemUrl");
        if (newItemName != null && !newItemName.isEmpty() && newItemUrl != null && !newItemUrl.isEmpty()) {
            // Create a new item and add it to the selected list
            Item newItem = new Item(newItemName, newItemUrl, "");
            ArrayList<Item> selectedList = allLists.get(listIndex);
            selectedList.add(newItem);
        }

        // Get the selected list
        ArrayList<Item> list = allLists.get(listIndex);
    
      out.write("\n");
      out.write("\n");
      out.write("    <!-- Form to create a new list -->\n");
      out.write("    <form method=\"post\">\n");
      out.write("        <label>Create a new list:</label>\n");
      out.write("        <input type=\"text\" name=\"newListName\">\n");
      out.write("        <input type=\"submit\" value=\"Create\">\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    <!-- Form to select which list to view -->\n");
      out.write("    <form method=\"get\">\n");
      out.write("        <label>Select a list to view:</label>\n");
      out.write("        <select name=\"listName\">\n");
      out.write("            ");
 for (String name : listNames) { 
      out.write("\n");
      out.write("            <option value=\"");
      out.print( name );
      out.write('"');
      out.write(' ');
      out.print( name.equals(listName) ? "selected" : "" );
      out.write('>');
      out.print( name );
      out.write("</option>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        </select>\n");
      out.write("        <input type=\"submit\" value=\"View\">\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("    <!-- Form to add an item to the selected list -->\n");
      out.write("    <form method=\"post\">\n");
      out.write("        <label>Add an item to ");
      out.print( listName );
      out.write(" :</label>\n");
      out.write("        <input type=\"text\" name=\"newItemName\">\n");
      out.write("        <input type=\"text\" name=\"newItemUrl\">\n");
      out.write("        <input type=\"submit\" value=\"Add\">\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    <h2>");
      out.print( listName );
      out.write("</h2>\n");
      out.write("    <ul>\n");
      out.write("        ");
 for (Item item : list) { 
      out.write("\n");
      out.write("        <li>");
      out.print( item.toString() );
      out.write("<br></br></li>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    </ul>\n");
      out.write("\n");
      out.write("    ");

        class Item {
            private String text;
            private String url;
            private String image;

            public Item (String text, String url, String image) {
                this.text = text;
                this.url = url;
                this.image = image;
            }

            public String getText() {
                return text;
            }

            public String getUrl() {
                return url;
            }

            public String getImage() {
                return image;
            }

            public String toString() {
                StringBuilder sb = new StringBuilder();
                sb.append(text);
                if (url != null && !url.trim().isEmpty()) {
                    sb.append(" (").append(url).append(")");
                }
                if (image != null && !image.trim().isEmpty()) {
                    sb.append(" <img src=\"").append(image).append("\">");
                }
                return sb.toString();
            }
        }
    
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
